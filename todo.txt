-NFT contract must communicate with SEPARATE escrow contract in order to approve transfers
-Access control in ESCROW ctrct will be necessary to make sure buyer funds cannot be withdrawn after purchase
--use ConditionalEscrow from openzeppelin for this? have the modifier return true only when matching roles call functions

Website:
  -watch tutorials on scaffold-eth for faster front-end developing using react
  -utilize tenderly for event emission subscription for a faster front-end? free
  -utilize netlify + create-react-app to build front end?
  -maybe use heroku? netlify looks easier
-consider network UX/UI: make connected network clear (mainnet v arbitrum)
-Explain transaction mining & gas considerations on UI

Escrow contract:
 -how to accept ERC20 token deposits (stables ie USDC, USDT, DAI) in ESCROW smart contract & communicate that to NFT market contract


Horn NFT Contract:
-consider splitting horn marketplace into several files:
--horn factory / horn marketplace / horn shipping
-review mappings, probably need a nested mapping?
  -differentiate horns for sale vs horns owned by owners
-how to store images of instruments 
  -on chain via .png?
  -tokenURI metadata?
  -hosted on front end website?
-how to list NFT horn via price vs auction (look at OPENSEA)
-review events

write more tests, think more about UX


Escrow + Marketplace interfacing:
 -how to use NFT contract to listen for deposits of said stablecoins (to mark as paid & initiate shipping)
  -approve/safetransfer double call thing
 

 Future functionality given extra time:
 how to create addresses on-chain? for ease of use (orchestra boomer users don't need to know they are using blockchain) 
